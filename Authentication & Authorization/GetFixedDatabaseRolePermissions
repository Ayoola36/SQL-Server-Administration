/*
	Returns a list of permissions for each fixed database role.
	NOTE: you cannot grant, deny or revoke permissions to or from special roles. (See Msg 4617.)
	Results may vary by SQL Server version, but will otherwise the be same on every database.
	(The script only needs to be run once per instance.)
	REFERENCE: https://docs.microsoft.com/en-us/sql/relational-databases/security/authentication-access/database-level-roles
*/
USE master;

IF NOT EXISTS (
	SELECT *
	FROM sys.database_principals  p
	WHERE p.name = 'TempUser'
)
BEGIN
	CREATE USER TempUser
	WITHOUT LOGIN
END
GO

CREATE TABLE #RolePermissions (
	PermissionName SYSName,
	db_accessadmin CHAR(1) DEFAULT(''),
	db_backupoperator CHAR(1) DEFAULT(''),
	db_datareader CHAR(1) DEFAULT(''),
	db_datawriter CHAR(1) DEFAULT(''),
	db_ddladmin CHAR(1) DEFAULT(''),
	db_denydatareader CHAR(1) DEFAULT(''),
	db_denydatawriter CHAR(1) DEFAULT(''),
	db_owner CHAR(1) DEFAULT(''),
	db_securityadmin CHAR(1) DEFAULT('')
)
GO

--Iterate through fixed database roles.
DECLARE @TSql NVARCHAR(MAX) = '';
DECLARE @RoleName SYSNAME;
DECLARE curRoles CURSOR FAST_FORWARD READ_ONLY FOR
	SELECT p.name
	FROM sys.database_principals p
	WHERE p.is_fixed_role = 1

OPEN curRoles
FETCH NEXT FROM curRoles INTO @RoleName

WHILE @@FETCH_STATUS = 0
BEGIN

	EXEC sp_addrolemember @RoleName, N'TempUser';
	EXECUTE AS USER = 'TempUser';
	PRINT @RoleName;

	SET @TSql = '
	BEGIN TRY
	MERGE #RolePermissions AS Target
	USING fn_my_permissions(NULL, ''DATABASE'') AS Source
		ON (Source.permission_name COLLATE SQL_Latin1_General_CP1_CI_AS = Target.PermissionName)
	WHEN MATCHED THEN
		UPDATE SET Target.[' + @RoleName + '] = ''Y''
	WHEN NOT MATCHED BY Target THEN
		INSERT([' + @RoleName + '], PermissionName) 
		VALUES(''Y'', Source.permission_name COLLATE SQL_Latin1_General_CP1_CI_AS)
	/*OUTPUT $action, Inserted.*, Deleted.**/;
	END TRY
	BEGIN CATCH
		UPDATE #RolePermissions
		SET [' + @RoleName + '] = NULL;
	END CATCH'
	EXEC(@Tsql);

	REVERT;
	EXEC sp_droprolemember @RoleName, N'TempUser';

	FETCH NEXT FROM curRoles INTO @RoleName
END

CLOSE curRoles;
DEALLOCATE curRoles;
GO

IF EXISTS (
	SELECT *
	FROM sys.database_principals  p
	WHERE p.name = 'TempUser'
)
BEGIN
	DROP USER TempUser;
END
GO

/*
	Role [db_denydatareader] is unable to execute fn_my_permissions
		(See Msg 229: The SELECT permission was denied on the object 'fn_my_permissions', database 'mssqlsystemresource', schema 'sys'.)
	Permissions will be "hard-coded" here, based on documentation
		(https://docs.microsoft.com/en-us/sql/relational-databases/security/authentication-access/database-level-roles?view=sql-server-ver15#special-roles-for--and-)
*/
UPDATE #RolePermissions SET db_denydatareader = '';	--For readability/consistency.

UPDATE #RolePermissions
SET db_denydatareader = 'Y'
WHERE PermissionName = 'DENY SELECT';

IF @@ROWCOUNT = 0
	INSERT INTO #RolePermissions(PermissionName, db_denydatareader) VALUES ('DENY SELECT', 'Y');

SELECT *
FROM #RolePermissions rp;

DROP TABLE #RolePermissions;
